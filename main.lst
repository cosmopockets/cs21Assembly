     1                                  ;Program Description: Chap 4 proj
     2                                  ;Author: Joel V
     3                                  ;Creation Date:	3/3/18
     4                                  ;Revisions:	they can be found inside of my commit history
     5                                  ;Date:	3/5/2018		Modified by: Joel
     6                                  ;Date:	3/5/2018
     7                                  ;Operating System:	linux mint
     8                                  ;IDE/Compiler:	N/A
     9                                  
    10                                  %include "./functions.inc" 
    11                              <1> ;
    12                              <1> ;Include file for the functions library
    13                              <1> ;
    14                              <1> sys_exit	equ	1h
    15                              <1> sys_read	equ	3h
    16                              <1> sys_write	equ	4h
    17                              <1> stdin		equ	0h
    18                              <1> stdout		equ	1h
    19                              <1> stderr		equ	3h
    20                              <1> 
    21                              <1> ;Print a string with no delimeter to the console
    22                              <1> ;Arguments:	Address of the String (Stack)
    23                              <1> ;			Length of the String (Stack)
    24                              <1> extern		PrintText
    25                              <1> 
    26                              <1> ;Print an endl character to the console
    27                              <1> ;Arguments:	None
    28                              <1> extern		Printendl
    29                              <1> 
    30                              <1> ;Print a 32bit numeric value as a Decimal to the console
    31                              <1> ;Arguments:	DWORD Value (stack)
    32                              <1> extern		Print32bitNumDecimal
    33                              <1> 
    34                              <1> ;Print a 32bit signed numeric value as a Decimal to the console
    35                              <1> ;Arguments:	DWORD Value (stack)
    36                              <1> extern		Print32bitSNumDecimal
    37                              <1> 
    38                              <1> ;Print a 32bit numeric value as a Binary to the console
    39                              <1> ;Arguments:	DWORD Value (stack)
    40                              <1> extern		Print32bitNumBinary
    41                              <1> 
    42                              <1> ;Print a 32bit numeric value as a Binary to the console
    43                              <1> ;Arguments:	DWORD Value (stack)
    44                              <1> extern		Print32bitFullBinary
    45                              <1> 
    46                              <1> ;
    47                              <1> ;Print a full 32-bits binary number in Floating Point format.
    48                              <1> ;Stack contents:
    49                              <1> ;	Value to Print to an Ascii String
    50                              <1> extern		Print32bitFloatBinary
    51                              <1> 
    52                              <1> ;Print a 32bit numeric value as a Hexidecimal to the console
    53                              <1> ;Arguments:	DWORD Value (stack)
    54                              <1> extern		Print32bitNumHex
    55                              <1> 
    56                              <1> ;Print The General Purpose Registers to the console
    57                              <1> ;Arguments:	None
    58                              <1> extern		PrintRegisters
    59                              <1> 
    60                              <1> ;Print The floating point Registers to the console
    61                              <1> ;Arguments:	None
    62                              <1> extern		PrintFloatingRegisters
    63                              <1> 
    64                              <1> ;Print a string with an ending 00h delimiter to the console
    65                              <1> ;Arguments:	Address of the String (Stack)
    66                              <1> extern		PrintString
    67                              <1> 
    68                              <1> ;Print a space to the console
    69                              <1> ;Arguments:	None
    70                              <1> extern		PrintSpace
    71                              <1> 
    72                              <1> ;Print a comma followed by a space to the console
    73                              <1> ;Arguments:	None
    74                              <1> extern		PrintComma
    75                              <1> 
    76                              <1> ;Print a Double Word floating point number
    77                              <1> ;Arguments: The floating point number to be printed (Stack)
    78                              <1> extern		PrintDWFloat
    79                              <1> 
    80                              <1> ;Call the function to get the CPU's Time Stamp Counter
    81                              <1> ;Arguments: None
    82                              <1> ;Return:  eax
    83                              <1> extern		GetTSC
    84                              <1> 
    85                              <1> ;Input Unsigned Int	
    86                              <1> ;This function will let the user input a string, then it will check it to make sure it
    87                              <1> ;is a positive integer.  It will then convert the ASCII string into a DWORD and return
    88                              <1> ;that value in the EAX register.
    89                              <1> ;Arguments: None
    90                              <1> ;Return: 	eax will contain the usigned ingeter
    91                              <1> ;			Carry flag will be set if invalid integer was input
    92                              <1> extern		InputUInt
    93                              <1> 
    94                              <1> ;Input Signed Int  TBD (just copied from input unsigned int - no code updated)
    95                              <1> ;This function will let the user input a string, then it will check it to make sure it
    96                              <1> ;is a positive integer.  It will then convert the ASCII string into a DWORD and return
    97                              <1> ;that value in the EAX register.
    98                              <1> ;Arguments: None
    99                              <1> ;Return: 	eax will contain the usigned ingeter
   100                              <1> ;			Carry flag will be set if invalid integer was input
   101                              <1> extern		InputSInt
   102                              <1> 
   103                              <1> ;Input Binary Number	
   104                              <1> ;This function will let the user input a string, then it will check it to make sure it
   105                              <1> ;is a binary number.  It will then convert the ASCII string into a DWORD and return
   106                              <1> ;that value in the EAX register.
   107                              <1> ;Arguments: None
   108                              <1> ;Return: 	eax will contain the number
   109                              <1> ;			Carry flag will be set if invalid binary number was input
   110                              <1> extern		InputBin
   111                              <1> 
   112                              <1> ;Input Hexidecimal Number	
   113                              <1> ;This function will let the user input a string, then it will check it to make sure it
   114                              <1> ;is a binary number.  It will then convert the ASCII string into a DWORD and return
   115                              <1> ;that value in the EAX register.
   116                              <1> ;Arguments: None
   117                              <1> ;Return: 	eax will contain the number
   118                              <1> ;			Carry flag will be set if invalid binary number was input
   119                              <1> extern		InputHex
   120                              <1> 
   121                              <1> ;Input a Floating Point Number	
   122                              <1> ;This function will let the user input a string, then it will check it to make sure it
   123                              <1> ;is a valid decimal number.  It will then convert the ASCII string into a DWORD and return
   124                              <1> ;that value in the ST(0) register.
   125                              <1> ;Arguments: None
   126                              <1> ;Return: 	eax will contain the number
   127                              <1> ;			Carry flag will be set if invalid binary number was input
   128                              <1> extern		InputFloat
   129                              <1> 
   130                                   
   131                                  bits 32 
   132                                     
   133                                    sizeByte  equ 1 
   134                                    sizeWord  equ  2 
   135                                    sizeDWord  equ  4 
   136                                    sizeQWord  equ  8 
   137                                   
   138                                  section .data 
   139                                    ;Initialized data definitions go here 
   140                                    
   141 00000000 77656C636F6D652074-     	welcomePrompt    db    "welcome to my program", 0dh, 0ah, 00h 
   142 00000009 6F206D792070726F67-
   143 00000012 72616D0D0A00       
   144                                  	
   145                                     
   146 00000018 50726F6772616D2073-     	openPrompt  db  "Program start", 0ah,  0dh,  00h 
   147 00000021 746172740A0D00     
   148                                  		.len	equ	($-openPrompt)
   149 00000028 50726F6772616D2065-     	closePrompt  db  "Program ending",0ah,  0dh,  00h 
   150 00000031 6E64696E670A0D00   
   151                                  		.len  equ  ($-closePrompt) 
   152                                  		
   153                                  		
   154 00000039 546869732070726F67-     	part1Preview	db	"This program will add up two byte arrays and print them in reverse order", 0ah,	0dh,	00h 
   155 00000042 72616D2077696C6C20-
   156 0000004B 616464207570207477-
   157 00000054 6F2062797465206172-
   158 0000005D 7261797320616E6420-
   159 00000066 7072696E7420746865-
   160 0000006F 6D20696E2072657665-
   161 00000078 727365206F72646572-
   162 00000081 0A0D00             
   163                                  						
   164 00000084 546869732070726F67-     	part2Preview	db	"This program will add up two double word array and store them in array6 printing them in first order", 0ah,	0dh,	00h
   165 0000008D 72616D2077696C6C20-
   166 00000096 616464207570207477-
   167 0000009F 6F20646F75626C6520-
   168 000000A8 776F72642061727261-
   169 000000B1 7920616E642073746F-
   170 000000BA 7265207468656D2069-
   171 000000C3 6E2061727261793620-
   172 000000CC 7072696E74696E6720-
   173 000000D5 7468656D20696E2066-
   174 000000DE 69727374206F726465-
   175 000000E7 720A0D00           
   176                                  						
   177                                  		
   178 000000EB 436F6E74656E747320-     	array3String	db	"Contents of Array 3 are: ",0ah,	0dh,	00h
   179 000000F4 6F6620417272617920-
   180 000000FD 33206172653A200A0D-
   181 00000106 00                 
   182                                  	
   183 00000107 436F6E74656E747320-     	array6String	db	"Contents of array6 are: ",0ah,	0dh,	00h
   184 00000110 6F6620617272617936-
   185 00000119 206172653A200A0D00 
   186                                       
   187                                       
   188 00000122 1030F0205012            	array1 db    10h, 30h, 0f0h, 20h, 50h, 12h 
   189                                  		.len equ ($-array1) 
   190 00000128 E04022E54055            	array2 db    0e0h, 40h, 22h, 0e5h, 40h, 55h 
   191                                  		.len equ ($-array2) 
   192 0000012E 000000000000            	array3 db    0h,0h,0h,0h,0h,0h 
   193                                  		.len equ ($-array3) 
   194                                     
   195 00000134 BD11000053340000F0-     	array4 dd    11BDh, 3453h, 2FF0h, 6370h, 3350h, 1025h
   196 0000013D 2F0000706300005033-
   197 00000146 000025100000       
   198                                  		.len equ ($-array4)
   199 0000014C FF0F00003F0C0000FF-     	array5 dd    0FFFh, 0C3Fh, 22FFh, 0EF53h, 400h, 5555h   
   200 00000155 22000053EF00000004-
   201 0000015E 000055550000       
   202                                  		.len equ ($-array5)
   203 00000164 000000000000000000-     	array6 dd    0000h, 0000h, 0000h, 0000h, 0000h, 0000h 
   204 0000016D 000000000000000000-
   205 00000176 000000000000       
   206                                  		.len equ ($-array6)
   207                                     
   208                                   
   209                                  section .bss 
   210                                    ;Uninitialized memory reservations go here 
   211                                      
   212                                  section .text 
   213                                   
   214                                  global _start 
   215                                  _start:
   216                                     
   217                                     
   218 00000000 68[00000000]            	push	welcomePrompt
   219 00000005 E8(00000000)            	call	PrintString
   220 0000000A E8(00000000)            	call	Printendl
   221                                  	
   222 0000000F 68[18000000]            	push	openPrompt
   223 00000014 E8(00000000)            	call	PrintString
   224 00000019 E8(00000000)            	call	Printendl
   225                                    ;code here 
   226                                    
   227 0000001E 68[39000000]            	push	part1Preview
   228 00000023 E8(00000000)            	call	PrintString
   229 00000028 E8(00000000)            	call	Printendl
   230                                  
   231 0000002D BA[2E010000]              mov edx, array3			;mov array3 into the edx register
   232 00000032 BA06000000                mov edx, 6  				;mov the size of the array inot edx register
   233 00000037 BE[22010000]              mov esi, array1 			;mov the address of array1 into esi
   234 0000003C BF[28010000]              mov edi, array2 			;mov the address of array2 into edi 
   235 00000041 B906000000                mov ecx, 6 				;the counter register is 6 
   236                                  							;because the array size is 6
   237                                         
   238                                     
   239                                      L1: 
   240 00000046 8A26                            mov ah, [esi]		;dereference array1 and mov into ah
   241 00000048 8A07                            mov	al, [edi] 		;dereference array2 and mov into al
   242                                           
   243 0000004A 00C4                            add ah,al 			;add first element together
   244 0000004C 8822                            mov [edx],ah 		;store in the address of array3
   245                                           
   246 0000004E 46                              inc esi 			;increment the "index" of the array1 by 1
   247 0000004F 47                              inc edi 			;increment the "index" of array2 by 1
   248 00000050 49                              dec	ecx
   249 00000051 4A                              dec edx 			;this is how you print it in reverse order
   250 00000052 E2F2                        Loop L1 
   251                                      
   252                                      
   253 00000054 E8(EB000000)                call	array3String
   254 00000059 E8(00000000)                call	PrintString
   255 0000005E E8(00000000)                call	Printendl
   256                                      
   257                                      
   258 00000063 E8(84000000)                call	part2Preview
   259 00000068 E8(00000000)                call	PrintString
   260 0000006D E8(00000000)                call	Printendl
   261                                       
   262                                   
   263 00000072 BA[64010000]              mov edx, array6 			;store the addition of array4 & array5
   264 00000077 BE[34010000]              mov esi, array4 			;mov array4 into esi register
   265 0000007C BF[4C010000]              mov edi, array5 			;mov array5 into edi register
   266                                     
   267 00000081 B906000000                mov ecx, 6 				;the counter is 6 
   268                                  							;because the size of the array is 6
   269                                     
   270                                   
   271                                      L2: 
   272 00000086 8B1F                          mov ebx, [edi] 		;mov the derefernece address of array5 in ebx
   273 00000088 01D0                          add eax, edx 			;add 
   274 0000008A 8902                          mov [edx], eax 
   275                                         
   276 0000008C 83C604                        add esi, 4			;we inc by four because that is the size of DD 
   277 0000008F 83C704                        add edi, 4 			;we inc by four because that is the size
   278 00000092 83C204                        add edx, 4 			;we inc by four because that is the size
   279 00000095 E2EF                        Loop L2 
   280                                     
   281                                    ;Code ends here
   282 00000097 E8(28000000)              call	closePrompt
   283 0000009C E8(00000000)              call	PrintString
   284 000000A1 E8(00000000)              call	Printendl
   285 000000A6 90                        nop
   286 000000A7 B801000000                mov eax,1 ; Exit system call value
   287 000000AC BB00000000                mov ebx,0 ; Exit return code
   288 000000B1 CD80                      int 80h ; Call the kernel
