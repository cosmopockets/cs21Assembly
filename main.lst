     1                                  ;Program Description:
     2                                  ;Author:
     3                                  ;Creation Date:
     4                                  ;Revisions:
     5                                  ;Date:			Modified by:
     6                                  ;Date:
     7                                  ;Operating System:
     8                                  ;IDE/Compiler
     9                                  
    10                                  %include "./functions.inc"
    11                              <1> ;
    12                              <1> ;Include file for the functions library
    13                              <1> ;
    14                              <1> sys_exit	equ	1h
    15                              <1> sys_read	equ	3h
    16                              <1> sys_write	equ	4h
    17                              <1> stdin		equ	0h
    18                              <1> stdout		equ	1h
    19                              <1> stderr		equ	3h
    20                              <1> 
    21                              <1> ;Print a string with no delimeter to the console
    22                              <1> ;Arguments:	Address of the String (Stack)
    23                              <1> ;			Length of the String (Stack)
    24                              <1> extern		PrintText
    25                              <1> 
    26                              <1> ;Print an endl character to the console
    27                              <1> ;Arguments:	None
    28                              <1> extern		Printendl
    29                              <1> 
    30                              <1> ;Print a 32bit numeric value as a Decimal to the console
    31                              <1> ;Arguments:	DWORD Value (stack)
    32                              <1> extern		Print32bitNumDecimal
    33                              <1> 
    34                              <1> ;Print a 32bit signed numeric value as a Decimal to the console
    35                              <1> ;Arguments:	DWORD Value (stack)
    36                              <1> extern		Print32bitSNumDecimal
    37                              <1> 
    38                              <1> ;Print a 32bit numeric value as a Binary to the console
    39                              <1> ;Arguments:	DWORD Value (stack)
    40                              <1> extern		Print32bitNumBinary
    41                              <1> 
    42                              <1> ;Print a 32bit numeric value as a Binary to the console
    43                              <1> ;Arguments:	DWORD Value (stack)
    44                              <1> extern		Print32bitFullBinary
    45                              <1> 
    46                              <1> ;
    47                              <1> ;Print a full 32-bits binary number in Floating Point format.
    48                              <1> ;Stack contents:
    49                              <1> ;	Value to Print to an Ascii String
    50                              <1> extern		Print32bitFloatBinary
    51                              <1> 
    52                              <1> ;Print a 32bit numeric value as a Hexidecimal to the console
    53                              <1> ;Arguments:	DWORD Value (stack)
    54                              <1> extern		Print32bitNumHex
    55                              <1> 
    56                              <1> ;Print The General Purpose Registers to the console
    57                              <1> ;Arguments:	None
    58                              <1> extern		PrintRegisters
    59                              <1> 
    60                              <1> ;Print The floating point Registers to the console
    61                              <1> ;Arguments:	None
    62                              <1> extern		PrintFloatingRegisters
    63                              <1> 
    64                              <1> ;Print a string with an ending 00h delimiter to the console
    65                              <1> ;Arguments:	Address of the String (Stack)
    66                              <1> extern		PrintString
    67                              <1> 
    68                              <1> ;Print a space to the console
    69                              <1> ;Arguments:	None
    70                              <1> extern		PrintSpace
    71                              <1> 
    72                              <1> ;Print a comma followed by a space to the console
    73                              <1> ;Arguments:	None
    74                              <1> extern		PrintComma
    75                              <1> 
    76                              <1> ;Print a Double Word floating point number
    77                              <1> ;Arguments: The floating point number to be printed (Stack)
    78                              <1> extern		PrintDWFloat
    79                              <1> 
    80                              <1> ;Call the function to get the CPU's Time Stamp Counter
    81                              <1> ;Arguments: None
    82                              <1> ;Return:  eax
    83                              <1> extern		GetTSC
    84                              <1> 
    85                              <1> ;Input Unsigned Int	
    86                              <1> ;This function will let the user input a string, then it will check it to make sure it
    87                              <1> ;is a positive integer.  It will then convert the ASCII string into a DWORD and return
    88                              <1> ;that value in the EAX register.
    89                              <1> ;Arguments: None
    90                              <1> ;Return: 	eax will contain the usigned ingeter
    91                              <1> ;			Carry flag will be set if invalid integer was input
    92                              <1> extern		InputUInt
    93                              <1> 
    94                              <1> ;Input Signed Int  TBD (just copied from input unsigned int - no code updated)
    95                              <1> ;This function will let the user input a string, then it will check it to make sure it
    96                              <1> ;is a positive integer.  It will then convert the ASCII string into a DWORD and return
    97                              <1> ;that value in the EAX register.
    98                              <1> ;Arguments: None
    99                              <1> ;Return: 	eax will contain the usigned ingeter
   100                              <1> ;			Carry flag will be set if invalid integer was input
   101                              <1> extern		InputSInt
   102                              <1> 
   103                              <1> ;Input Binary Number	
   104                              <1> ;This function will let the user input a string, then it will check it to make sure it
   105                              <1> ;is a binary number.  It will then convert the ASCII string into a DWORD and return
   106                              <1> ;that value in the EAX register.
   107                              <1> ;Arguments: None
   108                              <1> ;Return: 	eax will contain the number
   109                              <1> ;			Carry flag will be set if invalid binary number was input
   110                              <1> extern		InputBin
   111                              <1> 
   112                              <1> ;Input Hexidecimal Number	
   113                              <1> ;This function will let the user input a string, then it will check it to make sure it
   114                              <1> ;is a binary number.  It will then convert the ASCII string into a DWORD and return
   115                              <1> ;that value in the EAX register.
   116                              <1> ;Arguments: None
   117                              <1> ;Return: 	eax will contain the number
   118                              <1> ;			Carry flag will be set if invalid binary number was input
   119                              <1> extern		InputHex
   120                              <1> 
   121                              <1> ;Input a Floating Point Number	
   122                              <1> ;This function will let the user input a string, then it will check it to make sure it
   123                              <1> ;is a valid decimal number.  It will then convert the ASCII string into a DWORD and return
   124                              <1> ;that value in the ST(0) register.
   125                              <1> ;Arguments: None
   126                              <1> ;Return: 	eax will contain the number
   127                              <1> ;			Carry flag will be set if invalid binary number was input
   128                              <1> extern		InputFloat
   129                              <1> 
   130                                  
   131                                  bits 32
   132                                  section .data
   133                                    ;Initialized data definitions go here
   134                                    
   135                                  ;  welcomePrompt		db		"This asm program will do the following A+(B+C)=D & (A+C)-B=D", 0dh, 0ah, 0h
   136                                  	
   137 00000000 10                      	varA				db		10h				;this is the single byte variable
   138 00000001 0020                    	varB				dw		2000h			;this is the word variable
   139 00000003 00000300                	varC				dd		30000h			;this is the variable for the double word
   140                                  	
   141 00000007 412B28422B43293D44-     	str1				db		"A+(B+C)=D A=10, B=2000, C=30000 D=32010",0h
   142 00000010 20413D31302C20423D-
   143 00000019 323030302C20433D33-
   144 00000022 3030303020443D3332-
   145 0000002B 30313000           
   146 0000002F 28412B43292D423D44-     	str2				db		"(A+C)-B=D	D=2E010",0h
   147 00000038 09443D324530313000 
   148                                      
   149                                  
   150                                  section .bss
   151                                    ;Uninitialized memory reservations go here
   152                                    
   153 00000000 <res 00000010>            varD		resd		4	
   154                                  
   155                                  section .text
   156                                  
   157                                  global _start
   158                                  _start:
   159 00000000 90                        nop
   160                                    ;Code starts here
   161                                    
   162                                  ;  push		welcomePrompt
   163                                  ;  call		PrintString
   164                                  ;  call		Printendl
   165                                    
   166                                    
   167                                  	;call 		
   168                                  	
   169                                  	;push DWORD[varD]			;put the number onto the stack
   170                                  	;call Print32bitNumDecimal	;prints the number in the stack as hex-dec
   171                                  	;call Printendl
   172                                  	
   173                                    
   174                                  	;A+(B+C) =D
   175                                    
   176 00000001 B800000000              	mov	eax,0h					;zero out the eax register
   177 00000006 A1[01000000]            	mov	eax,[varB]				;move varb into eax register
   178                                    
   179 0000000B BB00000000              	mov	ebx,0h					;zero out ebx register
   180 00000010 8B1D[03000000]          	mov	ebx,[varC]				;mov varc into ebx register
   181                                    
   182 00000016 BA00000000              	mov	edx,0h					;zero out edx register
   183 0000001B 8B15[00000000]          	mov	edx,[varA]				;mov varA into edx register
   184                                    
   185 00000021 01D8                    	add	eax,ebx					;add ebx -> eax
   186                                    
   187 00000023 83C010                  	add	eax,10h					;add value of edx -> eax
   188                                  	
   189 00000026 68[07000000]            	push str1
   190 0000002B E8(00000000)            	call PrintString
   191 00000030 FF35[00000000]          	push DWORD[varD]
   192 00000036 E8(00000000)            	call Print32bitNumDecimal
   193 0000003B E8(00000000)            	call Printendl
   194                                    
   195                                  	;next we need to complete (A+C)-B=D
   196                                  	
   197 00000040 B800000000              	mov eax,0h					;zero eax register
   198 00000045 A1[03000000]            	mov eax,[varC]				;mov varC into eax register
   199 0000004A 83C010                  	add	eax,10h					;add 10hex to eax register
   200                                  	
   201 0000004D BB00000000              	mov	ebx,0h					;zero out ebx register
   202 00000052 8B1D[01000000]          	mov	ebx,[varB]				;mov varB into ebx register
   203                                  	
   204 00000058 29D8                    	sub eax,ebx					;we are going to subtract ebx register from eax register
   205                                  	
   206                                  	;mov [varD],0h				;zero out varD with 0-hexadecimals
   207 0000005A A1[00000000]            	mov eax,[varD]				;move [varD] into the eax register
   208                                  	
   209                                  	
   210 0000005F 68[07000000]            	push str1
   211 00000064 E8(00000000)            	call PrintString
   212 00000069 FF35[00000000]          	push DWORD[varD]
   213 0000006F E8(00000000)            	call Print32bitNumDecimal
   214 00000074 E8(00000000)            	call Printendl
   215                                  	
   216                                  	
   217                                  	
   218                                    
   219                                    
   220                                  								
   221                                    					
   222                                    ;Code ends here
   223 00000079 90                        nop
   224 0000007A B801000000                mov eax,1 ; Exit system call value
   225 0000007F BB00000000                mov ebx,0 ; Exit return code
   226 00000084 CD80                      int 80h ; Call the kernel
